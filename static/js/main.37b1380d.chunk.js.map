{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","totalcounter","className","href","Counter","console","log","this","getbadgeclasses","formatcount","onClick","props","onIncrement","counter","disabled","value","onDecrement","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","state","handlincrement","index","indexOf","setState","handldecrement","handlereset","c","handleevent","counterID","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37b1380d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Navbar = ({ totalcounter }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge-pill badge-secondary\">{totalcounter}</span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// class Navbar extends Component {\r\n//   render() {\r\n//     return (\r\n\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    console.log(\"counter render\");\r\n    // console.log(this.props);\r\n    return (\r\n      <div>\r\n        {/* {this.props.children} */}\r\n        {/* <h4>{this.props.id}</h4> */}\r\n        <span className={this.getbadgeclasses()}>{this.formatcount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n\r\n        <button\r\n          disabled={!this.props.counter.value}\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Decrement\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className={\"btn btn-danger  btn-sm m-2\"}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  getbadgeclasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatcount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"counters render\");\r\n    const {\r\n      onReset,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n    //this.state = this.props.something;\n  }\n\n  componentDidMount() {\n    console.log(\"App- Mounted\");\n  }\n\n  handlincrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handldecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n\n    this.setState({ counters });\n  };\n\n  handlereset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleevent = (counterID) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterID);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App-rendered\");\n    return (\n      <React.Fragment>\n        <Navbar\n          totalcounter={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handlereset}\n            onIncrement={this.handlincrement}\n            onDecrement={this.handldecrement}\n            onDelete={this.handleevent}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}